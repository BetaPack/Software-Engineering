import logging
import rand
import logging

<<<<<<< HEAD
# Set up logging configuration
logging.basicConfig(filename='logs/debugging.log', encoding='utf-8', level=logging.DEBUG, format='%(asctime)s %(message)s')
logging.debug("NEW LOG")

def mergeSort(arr):
    logging.debug(f'Starting mergeSort on array: {arr}')



    #Edge Case where the array has 0 or 1 element in the array
    if len(arr) <= 1:
        logging.debug(f'Base case reached with array: {arr}')
        return arr

    half = len(arr) // 2
    logging.debug(f'Splitting array into two halves: {arr[:half]} and {arr[half:]}')
    
    # Recursive call to sort each half
    leftSorted = mergeSort(arr[:half])
    rightSorted = mergeSort(arr[half:])
    
    # Recombine the sorted halves
    return recombine(leftSorted, rightSorted)
=======
logging.basicConfig(filename='hw2_debugging.log', encoding='utf-8', level=logging.DEBUG, format='%(asctime)s %(message)s')
logging.debug("NEW LOG")
logger=logging.getLogger("Debugging HW2")

def mergeSort(arr):
    logger.debug(f"Sorting array: {arr}")
    if len(arr) <= 1:
        return arr

    half = len(arr) // 2

    # Recursively split and merge
    left = mergeSort(arr[:half])
    right = mergeSort(arr[half:])
    
    return recombine(left, right)
>>>>>>> cbd4695 (Debugged and Fixed Code using logger)

def recombine(leftArr, rightArr):
    logging.debug(f'Recombining left: {leftArr} and right: {rightArr}')
    
    leftIndex = 0
    rightIndex = 0
<<<<<<< HEAD
    mergeArr = [None] * (len(leftArr) + len(rightArr))

    while leftIndex < len(leftArr) and rightIndex < len(rightArr):
        if leftArr[leftIndex] < rightArr[rightIndex]:
            mergeArr[leftIndex + rightIndex] = leftArr[leftIndex]
            leftIndex += 1
        else:
            mergeArr[leftIndex + rightIndex] = rightArr[rightIndex]
            rightIndex += 1
        logging.debug(f'Updated mergeArr: {mergeArr}')

    for i in range(rightIndex, len(rightArr)):
        mergeArr[leftIndex + i] = rightArr[i]
        logging.debug(f'Appending remaining elements from rightArr: {mergeArr}')

    for i in range(leftIndex, len(leftArr)):
        mergeArr[i + rightIndex] = leftArr[i]
        logging.debug(f'Appending remaining elements from leftArr: {mergeArr}')

    logging.debug(f'Finished recombining to: {mergeArr}')
    return mergeArr

# Test array
arr = rand.random_array([None] * 20)
logging.info(f'Array generated by the Rand function: {arr}')
arr_out = mergeSort(arr)
print(arr_out)
logging.info(f'Sorted array: {arr_out}')
=======
    mergeArr = []
    logger.debug(f"Recombining: {leftArr}, {rightArr}")

    # Merge the two arrays
    while leftIndex < len(leftArr) and rightIndex < len(rightArr):
        if leftArr[leftIndex] <= rightArr[rightIndex]:
            mergeArr.append(leftArr[leftIndex])
            leftIndex += 1
        else:
            mergeArr.append(rightArr[rightIndex])
            rightIndex += 1

    # If there are remaining elements in leftArr, add them
    while leftIndex < len(leftArr):
        mergeArr.append(leftArr[leftIndex])
        leftIndex += 1

    # If there are remaining elements in rightArr, add them
    while rightIndex < len(rightArr):
        mergeArr.append(rightArr[rightIndex])
        rightIndex += 1

    logger.debug(f"Merged array: {mergeArr}")
    return mergeArr

# Generate random array using the rand library
arr = rand.random_array([None] * 20)
logger.debug(f"Initial array: {arr}")

# Call mergeSort correctly
arr_out = mergeSort(arr)
logger.debug(f"Sorted array: {arr_out}")

print(arr_out)
>>>>>>> cbd4695 (Debugged and Fixed Code using logger)
