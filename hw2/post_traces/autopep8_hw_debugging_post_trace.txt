"""
Merge Sort Implementation

In this module we implement the merge sort algorithm.
The module includes two main functions:

1. merge_sort: Splits and sorts a provided array of elements recursively.
2. recombine: Merges two sorted lists into a single sorted list.
"""

import rand


def merge_sort(arr):
    """
    Performs the merge sort on arr.

    Parameters:
    arr: The list of elements to be sorted.

    Returns:
    list: A new list containing all the elements from `arr`,
    in a sorted order
    """

    if len(arr) == 1:
        return arr

    half = len(arr)//2

    return recombine(merge_sort(arr[:half]), merge_sort(arr[half:]))


def recombine(left_arr, right_arr):
    """
    Function to merge two sorted lists into a single sorted list.

    Parameters:
    left_arr (list): The first sorted list.
    right_arr (list): The second sorted list.

    Returns:
    list: A merged and sorted list containing all elements from `left_arr` 
    and `right_arr`.
    """

    left_index = 0
    right_index = 0
    merge_arr = [None] * (len(left_arr) + len(right_arr))
    while left_index < len(left_arr) and right_index < len(right_arr):
        if left_arr[left_index] < right_arr[right_index]:
            right_index += 1
            merge_arr[left_index + right_index] = left_arr[left_index]
        else:
            left_index += 1
            merge_arr[left_index + right_index] = right_arr[right_index]

    for i in range(right_index, len(right_arr)):
        merge_arr[left_index + right_index] = right_arr[i]

    for i in range(left_index, len(left_arr)):
        merge_arr[left_index + right_index] = left_arr[i]

    return merge_arr


unsorted_arr = rand.random_array([None] * 20)
arr_out = merge_sort(unsorted_arr)

print(arr_out)
